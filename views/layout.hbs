<!doctype html>
<html>

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <title>{{title}}</title>
  <link rel="stylesheet" href="//unpkg.com/@atlaskit/css-reset/dist/bundle.css" />
  {{{styleTags}}}
  <script src="//connect-cdn.atl-paas.net/all.js" type="text/javascript"></script>
</head>

<body>
  <section id="content" role="main" style="height: 100%;">{{{body}}}</section>
  <script src="{{reactSource}}"></script>
  <script src="{{reactDomSource}}"></script>
  <script id="__root_component_script" src="{{rootComponentSource}}" data-props="{{props}}"></script>
  <script>
    const getLinkedBugsList = async () => {
      const { jira: { issue: contextIssue } } = await AP.context.getContext()
      const issueLinksResponse = await AP.request({
        url: `/rest/api/latest/issue/${contextIssue.key}?fields=issuelinks`,
      })
      const { fields: { issuelinks: linkedBugsList } } = JSON.parse(issueLinksResponse.body);

      return linkedBugsList
    }

    const getLinkedBugsDetails = issueArr => {
      const linkedBugsDetailPromises = issueArr.map(
        // toDo: pending condition, based on task description
        // if (issue.issuetype.name !== 'Bug') return
        getBugDetails
      )
      return Promise.all(linkedBugsDetailPromises)
    }

    (async () => {
      try {
        const linkedBugsList = await getLinkedBugsList()
        const linkedBugsDetails = await getLinkedBugsDetails(linkedBugsList)

        ReactDOM.render(
          React.createElement(window.__root_component.default, linkedBugsDetails),
          document.getElementById('content')
        );
      } catch (e) {
        // toDo: handle error
        console.error(e)
      }
    })();

    const getBugDetails = async ({ inwardIssue }) => {
      const response = await AP.request({
        url: `/rest/api/latest/issue/${inwardIssue.key}`,
      })
      const { fields } = JSON.parse(response.body);

      return ({
        summary: fields.summary,
        created: new Date(fields.created).toUTCString(),
        assignee: fields.assignee?.displayName,
        status: fields.status.name,
        priority: fields.priority.name,
      })
    }
  </script>
</body>

</html>